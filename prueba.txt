include "globals.mzn";

% Entrada
int: n;  % Tamaño de la matriz
array[1..n, 1..n] of int: segmento_poblacion;
array[1..n, 1..n] of int: entorno_empresarial;
int: num_existentes;  % Número de localizaciones actuales
array[1..num_existentes] of int: x_existente;
array[1..num_existentes] of int: y_existente;
int: num_nuevos;  % Número de nuevas localizaciones

% Variables
array[1..num_nuevos] of var 1..n: x_nuevo;
array[1..num_nuevos] of var 1..n: y_nuevo;

% Variables para almacenar las sumas
array[1..num_nuevos] of var int: suma_segmento;
array[1..num_nuevos] of var int: suma_entorno;

% Restricciones
constraint forall(i in 1..num_nuevos)(
    % Calcular suma de valores alrededor de cada punto en `segmento_poblacion`
    suma_segmento[i] = sum(dx in -1..1, dy in -1..1 where
        x_nuevo[i] + dx > 0 /\ x_nuevo[i] + dx <= n /\ 
        y_nuevo[i] + dy > 0 /\ y_nuevo[i] + dy <= n)
        (segmento_poblacion[x_nuevo[i] + dx, y_nuevo[i] + dy]) /\

    % Calcular suma de valores alrededor de cada punto en `entorno_empresarial`
    suma_entorno[i] = sum(dx in -1..1, dy in -1..1 where
        x_nuevo[i] + dx > 0 /\ x_nuevo[i] + dx <= n /\ 
        y_nuevo[i] + dy > 0 /\ y_nuevo[i] + dy <= n)
        (entorno_empresarial[x_nuevo[i] + dx, y_nuevo[i] + dy]) /\

    % Restricciones de suma mínima en ambas matrices
    suma_segmento[i] >= 25 /\ 
    suma_entorno[i] >= 20
);

% Restricción para evitar ubicaciones duplicadas
constraint forall(i, j in 1..num_nuevos where i < j)(
    abs(x_nuevo[i] - x_nuevo[j]) > 1 \/ abs(y_nuevo[i] - y_nuevo[j]) > 1
);

% Restricción de no contigüidad con ubicaciones existentes
constraint forall(i in 1..num_nuevos)(
    forall(j in 1..num_existentes)(
        abs(x_nuevo[i] - x_existente[j]) > 1 \/ abs(y_nuevo[i] - y_existente[j]) > 1
    )
);

% Función objetivo: maximizar la ganancia total
var int: ganancia_total = sum(i in 1..num_nuevos)(suma_segmento[i] + suma_entorno[i]);

solve maximize ganancia_total;

output [
    "Ganancia total: ", show(ganancia_total), "\n",
    "Coordenadas nuevas: ", concat([ "(" ++ show(x_nuevo[i]) ++ "," ++ show(y_nuevo[i]) ++ ") " | i in 1..num_nuevos ])
];
